////////////////////////////////////////////////////////////////////////////////////////////////////
// Include(s)
////////////////////////////////////////////////////////////////////////////////////////////////////
#include "digital_filters/lowpass.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
// Namespace(s)
////////////////////////////////////////////////////////////////////////////////////////////////////
namespace Digital_Filters
{
namespace Lowpass
{

////////////////////////////////////////////////////////////////////////////////////////////////////
Digital_lowpass::Digital_lowpass(float t_s, float t_c)
    : m_t_s{ t_s }
    , m_t_c{ t_c }
    , m_y_n_1{ 0.0 }
{
    this->update_constants();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
float Digital_lowpass::tick(float x_n)
{
    float y_n{ (this->m_a * x_n) + (this->m_b * this->m_y_n_1) };
    this->m_y_n_1 = y_n;

    return y_n;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
float Digital_lowpass::get_output() const
{
    return this->m_y_n_1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
float Digital_lowpass::get_sampling_speed() const
{
    return this->m_t_s;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Digital_lowpass::set_sampling_speed(float t_s)
{
    this->m_t_s = t_s;
    this->update_constants();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
float Digital_lowpass::get_time_constant() const
{
    return this->m_t_c;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Digital_lowpass::set_time_constant(float t_c)
{
    this->m_t_c = t_c;
    this->update_constants();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Digital_lowpass::update_constants()
{
    this->m_a = this->m_t_s / (this->m_t_s + this->m_t_c);
    this->m_b = this->m_t_c / (this->m_t_s + this->m_t_c);
}

} // namespace Lowpass
} // namespace Digital_Filters
