#ifndef DIGITAL_FILTERS_LOWPASS_H
#define DIGITAL_FILTERS_LOWPASS_H

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief An implementation of a digital lowpass filter.
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
// Namespace(s)
////////////////////////////////////////////////////////////////////////////////////////////////////
namespace Digital_Filters
{

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief A digital lowpass filter object.
////////////////////////////////////////////////////////////////////////////////////////////////////
class Digital_lowpass
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief The constructor sets the system sampling speed and cutoff frequency.
    ///
    /// @param[in] t_s System sampling speed.
    /// @param[in] f_c System cutoff frequency.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    Digital_lowpass(float t_s, float f_c);

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Tick the system with an input.
    ///
    /// @param[in] x_n The system input.
    ///
    /// @return The new system output.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    float tick(float x_n);

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// @return The system output.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    float get_output() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Updates the system sampling speed.
    ///
    /// @param[in] t_s The new sampling speed.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    void set_sampling_speed(float t_s);

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// @return The system sampling speed.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    float get_sampling_speed() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Updates the system time constant.
    ///
    /// @param[in] f_c The new cutoff frequency.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    void set_cutoff_frequency(float f_c);

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// @return The system cutoff frequency.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    float get_cutoff_frequency() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// @return The system time constant.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    float get_time_constant() const;

private:
    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Updates the system constants.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    void update_constants();

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief The system sampling speed.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    float m_t_s;

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief The system cutoff frequency.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    float m_f_c;

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief The system time constant.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    float m_t_c;

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief The system's previous output.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    float m_y_n_1;

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief The system alpha parameter.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    float m_a;

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief The system beta parameter.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    float m_b;
};

} // namespace DigitalFilters

#endif // DIGITAL_FILTERS_LOWPASS_H
